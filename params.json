{"google":"","body":"============\r\npy_apsrtable\r\n============\r\n\r\nOverview\r\n--------\r\n\r\npy_apsrtable aims to be the python implemenation of the R package apsrtable\r\n(http://cran.r-project.org/web/packages/apsrtable/index.html).\r\n\r\npy_asprtable takes as its input a model, or set of models, generated by the \r\npython packages statsmodels (http://statsmodels.sourceforge.net/) and pandas\r\n(http://pandas.pydata.org/), and outputs a LaTeX table formatted in a manner\r\nconsistent with common political science formatting.\r\nThe formatting is also nice for other applications. \r\n\r\nOptions for the models includes standard errors, two-tailed p values, and \r\none-tailed p values. The variable and model names can be changed, and the stars\r\n(*) can be placed next to the values in parentheses depending on the\r\nsignificance level defined by the user. \r\n\r\nUpdates\r\n-------\r\n\r\n#####01.14.13\r\n\r\n- Added *N*, AIC, and BIC to the bottom of the model. \r\n\r\n#####01.07.13\r\n\r\n- Added the ability to print the table to the Python shell instead of writing to\r\n  a file. \r\n\r\n#####01.02.13\r\n\r\n- Simplified the execution down to one function.\r\n- Added the ability to change the signficance level.\r\n- Refactored the code some to be cleaner. \r\n\r\nFuture\r\n------\r\n\r\nEventually I would like to add an option to add a different number of stars for\r\ndifferent p-values and the option to change which statistics are reported at the\r\nbottom of the table, e.g., R^2, adjusted R^2. \r\n\r\nExample\r\n-------\r\n\r\nUsage for a single model::\r\n    \r\n    #Imports\r\n    import py_apsrtable\r\n    import statsmodels.api as sm\r\n    import pandas as pd\r\n\r\n    #Generate some data to use\r\n    data = sm.datasets.longley.load()\r\n    df = pd.DataFrame(data.exog, columns=data.exog_name)\r\n    y = data.endog\r\n    df['intercept'] = 1.\r\n\r\n    #Generate the OLS output and store it in olsresult\r\n    olsresult = sm.OLS(y, df).fit()\r\n\r\n    #Add the results to a list. The functions require the results to be in a list.\r\n    models = [olsresult]\r\n\r\n    #Check the order of the variable names\r\n    print sorted(olsresult.params.iteritems())\r\n\r\n    #Define the names to replace the variables\r\n    replaceNames = ['Armed', 'Gross National Product', 'GNPDEFL', 'Population', \r\n    'Unemployment', 'Year', 'intercept']\r\n\r\n    #Assign the generateTable class with the initial values\r\n    #Print is an alternate option for the output argument\r\n    a = py_apsrtable.generateTable('/path/to/file/table.tex', models, center = 'True', parens= 'se', sig_level=0.05, var_names = replaceNames)\r\n\r\n    #Create the table\r\n    a.create_table(caption='OLS Results Table', label='tab:ols', model_name = None, stars=True)\r\n\r\nUsage for multiple models::\r\n\r\n    #Imports\r\n    import py_apsrtable\r\n    import statsmodels.api as sm\r\n    import pandas as pd\r\n\r\n    #Generate some data to use\r\n    data = sm.datasets.longley.load()\r\n    df = pd.DataFrame(data.exog, columns=data.exog_name)\r\n    y = data.endog\r\n    df['intercept'] = 1.\r\n\r\n    #Generate three separate models, each with different numbers of variables. \r\n    olsresult = sm.OLS(y, df).fit()\r\n    olsresult2 = sm.OLS(y, df[['GNP', 'UNEMP', 'ARMED']]).fit()\r\n    olsresult3 = sm.OLS(y, df[['GNP', 'POP', 'ARMED', 'YEAR']]).fit()\r\n\r\n    #Put the models into a list\r\n    models = [olsresult, olsresult2, olsresult3]\r\n\r\n    #Check the order of the variable names\r\n    print sorted(olsresult.params.iteritems())\r\n\r\n    #Define the names to replace the variables\r\n    replaceNames = ['Armed', 'Gross National Product', 'GNPDEFL', 'Population', \r\n    'Unemployment', 'Year', 'intercept']\r\n\r\n    #Assign the generateTable class with the initial values\r\n    a = py_apsrtable.generateTable('print', models, center = 'True', parens= 'se', sig_level=0.10, var_names = replaceNames)\r\n\r\n    #Create the table\r\n    a.create_table(caption='OLS Results Table', label='tab:ols', model_name = None, stars=True)\r\n\r\nAn example of the final PDF output generated by the above code can be seen \r\n[here](http://johnbeieler.org/code/downloads/example.pdf).\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"py_apsrtable","tagline":"Pythonic implementation of the R package apsrtable"}